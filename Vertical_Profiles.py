#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 10 14:41:26 2021
This file reads some files coming from a ensemble wrf run and
plot the vertical profiles of some variables of the ensemble 
mean and the ensemble members.
txay files are generated by the command "ncwa " 
em_txya was generated by running the command "ncea txyave_EXP1_JAN_* em_txyave_EXP1_JAN.nc"
@author: naz


"""




from __future__ import print_function



def wrf_theta(ZTEMP):
    return (ZTEMP+300.)

def wrf_temp(ZTHETA,ZPRES):
    return (ZTHETA)*(ZPRES/1000.)**(.2854) # in hPa


def wrf_rh(ZTEMP,ZPRES,ZQV):
    A= 6.11*100. #Pa
    Rv = 461.495 #J/kg/K
    Lv = 2.453*10**6 #J/Kg
    
    ES = A*np.exp((Lv/Rv)*((1./273.)-(1./ZTEMP))) #in Pa
    SMXRAT = ((621.97*ES)/(ZPRES-ES))/1000.
    return (ZQV/SMXRAT)*100.

def assign_dataset(expmon,path_dir):
    for i in range(0,11):
        if i==0:
            # this is the ensemble mean
            ff=path_dir+"/em_"+"txyave_"+expmon+".nc"
            print(ff)
            ens=xr.open_dataset(ff)
            ensold=ens
        elif i>0 and i< 10:
            
            ff=path_dir+"/txyave_"+expmon+"_0"+str(i)+".nc"  
            print(ff)
            ens=xr.open_dataset(ff)
            ens=xr.concat([ens,ensold],dim="Time")
            ensold=ens
        elif i>=10:
            
            ff=path_dir+"/txyave_"+expmon+"_"+str(i)+".nc"
            print(ff)
            ens=xr.open_dataset(ff)
            ens=xr.concat([ens,ensold],dim="Time")
    return(ens)

from wrf import  eth
import numpy as np
import xarray as xr
import matplotlib.pyplot  as plt

# fill the variables cnt and exp1, which are stacks - LIFO (Last In First Out)
#--------------------------------------------------------------------

exp="CNT"
mon="JAN"

expmon="_".join((exp,mon))
path_dir="/".join(("/home","naz","work","EUREC4A-OA",expmon))
cnt=assign_dataset(expmon,path_dir)

exp="EXP1"
mon="JAN"

expmon="_".join((exp,mon))
path_dir="/".join(("/home","naz","work","EUREC4A-OA",expmon))
exp1=assign_dataset(expmon,path_dir)

#------------------------------------------------------------------


fig1=plt.figure(figsize=(9,8))
axs = fig1.subplots(2,2, sharey=True)

fig1.suptitle('CNT-EXP1')
plt.gca().invert_yaxis()
for i in reversed(range(0,11)):
    # member n. 10 is the ensemble mean
    Theta_cnt=wrf_theta(cnt.Theta[:,i])
    Theta_exp1=wrf_theta(exp1.Theta[:,i])
    Temp_cnt=wrf_temp(Theta_cnt, cnt.interp_level)
    Temp_exp1=wrf_temp(Theta_exp1,exp1.interp_level)
    eth_cnt=eth(cnt.Qv[:,i],Theta_cnt, cnt.interp_level*100, meta=True, units='K')
    eth_exp1=eth(exp1.Qv[:,i], Theta_exp1, exp1.interp_level*100, meta=True, units='K')
   
    if i==10:
        # plot specific humidity in g/kg
        axs[0,0].plot(cnt.Theta[:,i]-exp1.Theta[:,i], cnt.interp_level, color='blue', lw=2)
        axs[0,1].plot(cnt.Qv[:,i]*1000-exp1.Qv[:,i]*1000, cnt.interp_level, color='blue', lw=2)
        axs[1,0].plot(Temp_cnt-Temp_exp1, cnt.interp_level, color='blue', lw=2)
        axs[1,1].plot(eth_cnt-eth_exp1, cnt.interp_level, color='blue', lw=2)
    else:
        axs[0,0].plot(cnt.Theta[:,i]-exp1.Theta[:,i], cnt.interp_level, color='red', lw=1)
        axs[0,1].plot(cnt.Qv[:,i]*1000-exp1.Qv[:,i]*1000, cnt.interp_level, color='red', lw=1)
        axs[1,0].plot(Temp_cnt-Temp_exp1, cnt.interp_level, color='red', lw=1)
        axs[1,1].plot(eth_cnt-eth_exp1, cnt.interp_level, color='red', lw=1)

axs[0,0].title.set_text("Potential Temperature (K)")
axs[0,1].title.set_text("Specific Humidity (g/kg)")
axs[1,0].title.set_text("Temperature (K)")
axs[1,1].title.set_text("Equivalent Potential Temperature (K)")
axs[0,0].set_ylabel('Pressure (hPa)')
axs[1,0].set_ylabel('Pressure (hPa)')

fig1.tight_layout()
plt.show()

fig2=plt.figure(figsize=(5,8))
axs = fig2.subplots(1,2, sharey=True)
fig2.suptitle('CNT-EXP1')
plt.gca().invert_yaxis()
for i in reversed(range(0,11)):  
    if i==10:
        axs[0].plot(cnt.QNIFA[:,i]-exp1.QNIFA[:,i], cnt.interp_level, color='blue', lw=2)
        axs[1].plot(cnt.QNWFA[:,i]-exp1.QNWFA[:,i], cnt.interp_level, color='blue', lw=2)
        
    elif (i<10 and i!=9):
        axs[0].plot(cnt.QNIFA[:,i]-exp1.QNIFA[:,i], cnt.interp_level, color='red', lw=1)
        axs[1].plot(cnt.QNWFA[:,i]-exp1.QNWFA[:,i], cnt.interp_level, color='red', lw=1)
        
axs[0].title.set_text("QNIFA (numbers/kg)")
axs[1].title.set_text("QNWFA (numbers/kg)")

axs[0].set_ylabel('Pressure (hPa)')
fig2.tight_layout()
plt.show()

fig3=plt.figure(figsize=(9,8))
axs = fig3.subplots(2,2, sharey=True)
fig3.suptitle('CNT-EXP1')
plt.gca().invert_yaxis()
for i in reversed(range(0,11)):
    Theta_cnt=wrf_theta(cnt.Theta[:,i])
    Theta_exp1=wrf_theta(exp1.Theta[:,i])
    Temp_cnt=wrf_temp(Theta_cnt, cnt.interp_level)
    Temp_exp1=wrf_temp(Theta_exp1,exp1.interp_level)
    rh_cnt=wrf_rh(Temp_cnt, cnt.interp_level*100,cnt.Qv[:,i])
    rh_exp1=wrf_rh(Temp_exp1, exp1.interp_level*100,exp1.Qv[:,i])
    
    if i==10:
        axs[0,0].plot(cnt.U[:,i]-exp1.U[:,i], cnt.interp_level, color='blue', lw=2)
        axs[0,1].plot(cnt.V[:,i]-exp1.V[:,i], cnt.interp_level, color='blue', lw=2)
        axs[1,0].plot(cnt.W[:,i]*100-exp1.W[:,i]*100, cnt.interp_level, color='blue', lw=2)
        axs[1,1].plot(rh_cnt-rh_exp1, cnt.interp_level, color='blue', lw=2)
    else:
        axs[0,0].plot(cnt.U[:,i]-exp1.U[:,i], cnt.interp_level, color='red', lw=1)
        axs[0,1].plot(cnt.V[:,i]-exp1.V[:,i], cnt.interp_level, color='red', lw=1)
        axs[1,0].plot(cnt.W[:,i]*100-exp1.W[:,i]*100, cnt.interp_level, color='red', lw=1)
        axs[1,1].plot(rh_cnt-rh_exp1, cnt.interp_level, color='red', lw=1)
axs[0,0].title.set_text("U (m/s)")
axs[0,1].title.set_text("V (m/s)")
axs[1,0].title.set_text("W (cm/s")
axs[1,1].title.set_text("Relative Humidity %")
axs[0,0].set_ylabel('Pressure (hPa)')
axs[1,0].set_ylabel('Pressure (hPa)')

fig3.tight_layout()
plt.show()
        # axs[1,1].plot(rh_exp1, cnt.interp_level, color='green', lw=1)



plt.figure()
plt.gca().invert_yaxis()
for i in range(1,11):
    # for j in range(1,11):
        diff=cnt.Theta[:,9]-cnt.Theta[:,i]
        plt.plot(diff, cnt.interp_level,color='red', lw=1)
        print(diff.values.max(),diff.values.min())
        # if np.sum(diff==0):
        #     print(i,j)
